void main(float4 col    : TEXCOORD0,
          float4 diag   : TEXCOORD1,
          float4 c3     : TEXCOORD2,
          float4x4 MTI  : TEXCOORD3,
          float2 wpos   : WPOS,
  uniform float4x4 ProjI,
  uniform float2 wsize,
  uniform float4 lightpos,
      out float depthout : DEPTH,
      out float4 colorout: COLOR0
        )
{
    float b, c, d, sol;
    float4 x_c = float4(wpos / wsize * 2.0 - 1.0, 0.0, 1.0);
    float4 x_e = mul(ProjI, x_c);
    float4 x_p = mul(MTI, x_e);

    float4 tmp = x_p * diag;
    b = dot(tmp, c3);
    c = dot(tmp, x_p);

    d = b * b - c;

    if (d < 0.0)
        discard;

    sol = -b-sqrt(d);
    depthout = sol * 0.5 + 0.5;

    x_p += c3 * sol;
    float3 normal = mul(transpose(MTI), x_p).xyz;
    normal = normalize(normal);

    float3 pos = x_e.xyz / (ProjI._m32 * sol + x_e.w);

    float3 l = lightpos.xyz - pos;
    l = normalize(l);

    d = dot(normal, l);
    float3 r = 2.0 * d * normal.xyz - l;
    r = normalize(r);

    static const float4 lightcolor = float4(1.0, 1.0, 1.0, 1.0);
    static const float ka = 0.1;
    static const float kd = 0.8;
    static const float ks = 0.5;
    static const float sn = 16.0;

    colorout = col * (lightcolor * max(0.0, d) * kd + ka) + lightcolor * pow(max(0.0, dot(r, normalize(-pos.xyz))), sn) * ks;
}
